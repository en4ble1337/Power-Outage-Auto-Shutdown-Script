# Power Outage Auto-Shutdown Script

A lightweight bash script that monitors internet connectivity and gracefully shuts down your system during power outages to prevent data corruption.

## ‚ö†Ô∏è Disclaimer

**I don't take any responsibility for this script. This is my way of giving back to the community. Always test thoroughly before putting into production and adjust to your specific situation.**

# üéØ Purpose

---

During power outages, this script ensures graceful system shutdown instead of abrupt power cut-off by monitoring internet connectivity as a proxy for power status.

# üß† Logic

---

When power goes out, your ISP typically goes down too. The script monitors internet connectivity by pinging 1.1.1.1 every minute. After 5 consecutive failures (configurable), it triggers a graceful shutdown, giving you time to work on battery backup.

# ‚úÖ Benefits

---

**Why Graceful Shutdown Matters:**
- Applications close properly instead of crashing
- Prevents data corruption and file system issues
- Databases and services shut down cleanly
- Reduces recovery time when power returns

# üìã Requirements

- Linux/Unix system with bash
- Cron job capability
- Root/sudo access
- Battery backup (UPS) recommended

# üîß Installation

### 1. Clone the Repository
```bash
git clone https://github.com/en4ble1337/Power-Outage-Auto-Shutdown-Script.git
cd Power-Outage-Auto-Shutdown-Script
```

### 2. Install the Script
```bash
sudo cp ping_monitor.sh /usr/local/bin/
sudo chmod +x /usr/local/bin/ping_monitor.sh
```

### 3. Setup Cron Job
```bash
sudo crontab -e
```

Add this line:
```
# Run ping monitor every minute
* * * * * /usr/local/bin/ping_monitor.sh
```

### 4. Setup Log Files
```bash
sudo touch /var/log/ping_monitor.log
sudo touch /var/log/ping_monitor_counter
sudo chmod 644 /var/log/ping_monitor.log
sudo chmod 644 /var/log/ping_monitor_counter
```

# ‚öôÔ∏è Configuration

Edit the script to customize:
- **Timeout**: Change the `5` in the failure check to your desired minutes
- **Target IP**: Change `1.1.1.1` to a different reliable server
- **Ping timeout**: Modify the `-W 5` parameter for different ping timeouts

# üîç How It Works

1. Script pings 1.1.1.1 once every minute via cron
2. If ping fails, increments counter in `/var/log/ping_monitor_counter`
3. If ping succeeds, resets counter to 0
4. After 5 consecutive failures, issues graceful shutdown command
5. All activities are logged to `/var/log/ping_monitor.log`

# üß™ Testing

**Safe Testing (without actual shutdown):**
1. Comment out the shutdown line in the script:
   ```bash
   # /sbin/shutdown -h now "Network connectivity lost - automatic shutdown triggered"
   ```
2. Block 1.1.1.1 traffic temporarily:
   ```bash
   sudo iptables -A OUTPUT -d 1.1.1.1 -j DROP
   ```
3. Monitor the log:
   ```bash
   tail -f /var/log/ping_monitor.log
   ```
4. Restore connectivity:
   ```bash
   sudo iptables -D OUTPUT -d 1.1.1.1 -j DROP
   ```

# üìä Monitoring

**Check current failure count:**
```bash
cat /var/log/ping_monitor_counter
```

**View log file:**
```bash
tail -f /var/log/ping_monitor.log
```

**Check if cron job is running:**
```bash
sudo crontab -l | grep ping_monitor
```

# üèóÔ∏è System Assumptions

- System runs on battery backup (UPS)
- Default 5-minute window is adjustable based on your battery capacity
- Internet outage indicates power outage in most cases
- System has sufficient UPS runtime for graceful shutdown

# ‚ö†Ô∏è Recommendations for Critical Systems

For validators or mission-critical systems:
- Always maintain full system backups (not just keys)
- Consider running standby/failover units
- Test your UPS runtime regularly
- Monitor UPS battery health
- Consider shorter timeout periods for faster response

# üîß Troubleshooting

**Script not running:**
- Check cron service: `systemctl status cron`
- Verify crontab entry: `sudo crontab -l`
- Check script permissions: `ls -la /usr/local/bin/ping_monitor.sh`

**False shutdowns:**
- Increase failure threshold in script
- Use different target IP addresses
- Check network stability

**Log files not created:**
- Verify write permissions to `/var/log/`
- Check disk space

# ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

# üìÑ License

This project is released under the MIT License. See LICENSE file for details.

# ‚≠ê Support

If you find this script helpful, please star the repository! 

For issues or questions, please open a GitHub issue.
